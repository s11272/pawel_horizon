---
// components
import Button from "@components/Button/Button.astro";
---

<form id="contact-form" name="contact form" class="flex h-full flex-col justify-between gap-4"
	  action="https://usebasin.com/f/066c447185af"
	  method="POST"
>
	<input type="hidden" name="form-name" value="contact" />
	<div>
		<label for="contact-name" class="font-heading-1 text-lg uppercase">Twoje imię</label>
		<input type="text" class="form__input" name="name" id="contact-name" placeholder="" required />
	</div>
	<div class="flex flex-col gap-1">
		<label for="contact-email" class="font-heading-1 text-lg uppercase">Twój E-mail </label>
		<input
			type="email"
			class="form__input"
			name="email"
			id="contact-email"
			inputmode="email"
			placeholder=""
			required
		/>
	</div>
	<div>
		<label for="contact-date" class="font-heading-1 text-lg uppercase">Data Wydarzenia</label>
		<input type="date" class="form__input" name="date" id="contact-date" placeholder="" required />
	</div>
	<div>
		<label for="contact-message" class="font-heading-1 text-lg uppercase">Wiadomość</label>
		<textarea
			name="message"
			class="form__input"
			id="contact-message"
			rows="6"
			placeholder=""
			required></textarea>
	</div>
	<div class="flex">
		<!--<Button variant="primary" type="submit" class="w-full px-10 md:w-fit">Wyślij</Button>-->
		<button
			type="submit"
			class="focus-visible:ring-opacity-50 flex items-center justify-center gap-2 rounded-md bg-blue-600 p-2.5 text-white transition hover:bg-blue-700 focus:outline-none focus-visible:ring-2 focus-visible:ring-blue-600"
		>
			<!-- your loading SVG here with id="form-loading" -->
			<svg
				id="form-loading"
				xmlns="http://www.w3.org/2000/svg"
				viewBox="0 0 24 24"
				fill="none"
				stroke="currentColor"
				stroke-width="2"
				stroke-linecap="round"
				stroke-linejoin="round"
				class="icon icon-tabler icons-tabler-outline icon-tabler-loader-2 hidden size-5 animate-spin"
			>
				<path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
				<path d="M12 3a9 9 0 1 0 9 9"></path>
			</svg>
			Wyślij
		</button>
	</div>
	<!-- honeypot field to catch bots. Purposefully mispelled "email" as "emai" to better trick bots -->
	<label for="emai" class="sr-only">Real users skip this field</label>
	<input id="emai" type="text" name="emai" class="sr-only" tabindex="-1" />
</form>
<!-- message send success feedback -->
<dialog
	id="form-good-feedback"
	class="invisible fixed bottom-4 z-10 mx-auto flex rounded-lg bg-green-200 p-0 text-green-800 opacity-0 transition duration-300"
>
	<div class="p-4 text-center">
		<p>Wiadomość wysłana! Odpowiem w ciągu kilku dni!</p>
	</div>
</dialog>

<!-- message send fail feedback -->
<dialog
	id="form-bad-feedback"
	class="invisible fixed bottom-4 z-10 mx-auto flex rounded-lg bg-red-200 p-0 text-red-800 opacity-0 transition duration-300"
>
	<div class="p-4 text-center">
		<p>Coś poszło nie tak. Spróbuj ponownie, albo skontaktuj się ze mną emailem lub za pomocą mediów społecznościowych</p>
	</div>
</dialog>
<script>
	// handle the form submission
	var xhr = new XMLHttpRequest();

	// only one contact form supported per page
	const form = document.getElementById("contact-form") as HTMLFormElement;
	const formLoadingIndicator = document.getElementById("form-loading");
	const formGoodFeedback = document.getElementById("form-good-feedback");
	const formBadFeedback = document.getElementById("form-bad-feedback");

	const handleFormSubmission = (event) => {
		// prevent page from reloading
		event.preventDefault();

		// show loading indicator
		formLoadingIndicator?.classList.remove("hidden");

		// get form data
		const formData = new FormData(form);

		// create POST request to the form action attribute
		xhr.open("POST", form.action, true);

		// make sure we receive json back
		xhr.setRequestHeader("Accept", "application/json");

		// SEND IT!
		xhr.send(formData);

		// once we get a response...
		xhr.onload = function () {
			formLoadingIndicator?.classList.add("hidden");
			const response = JSON.parse(xhr.response);

			if (xhr.status === 200) {
				// The request was successful
				console.log("Form submitted successfully.");
				// reset form on successful email send
				form?.reset();

				if (formGoodFeedback) {
					formGoodFeedback.classList.remove("invisible");
					formGoodFeedback.classList.add("opacity-100");

					// reset form feedback after a few seconds
					setTimeout(() => {
						formGoodFeedback.classList.remove("opacity-100");

						setTimeout(() => {
							formGoodFeedback.classList.add("invisible");
						}, 300);
					}, 5000);
				}
			} else {
				const message = "Form submission failed with error: " + response.error;
				console.log(message);
				// The request failed
				if (formBadFeedback) {
					formBadFeedback.classList.remove("invisible");
					formBadFeedback.classList.add("opacity-100");

					// reset form feedback after a few seconds
					setTimeout(() => {
						formBadFeedback.classList.remove("opacity-100");

						setTimeout(() => {
							formBadFeedback.classList.add("invisible");
						}, 300);
					}, 7000);
				}
			}
		};
	};

	form?.addEventListener("submit", handleFormSubmission, true);
</script>